import axios from "axios"

// Configuration de base pour l'API des actualit√©s
const API_BASE_URL = "http://sogetrag.com/apistage"
const API_TIMEOUT = 20000 // 20 secondes

// Configuration de la base de donn√©es
const DB_CONFIG = {
  host: '91.216.107.162',
  dbname: 'soget2616263',
  username: 'soget2616263',
  password: '0Objectif-'
}

// Cr√©er une instance Axios pour les actualit√©s
const actualitesApiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: API_TIMEOUT,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
    "X-Requested-With": "XMLHttpRequest",
  },
  withCredentials: false,
})

// Intercepteur pour les requ√™tes
actualitesApiClient.interceptors.request.use(
  (config) => {
    console.log(`üîÑ Actualit√©s API Request: ${config.method?.toUpperCase()} ${config.url}`)
    if (config.data) {
      console.log("üì§ Donn√©es envoy√©es:", config.data)
    }
    if (config.params) {
      console.log("üì§ Param√®tres:", config.params)
    }
    return config
  },
  (error) => {
    console.error("‚ùå Erreur de requ√™te actualit√©s:", error)
    return Promise.reject(error)
  },
)

// Intercepteur pour les r√©ponses
actualitesApiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Actualit√©s API Response: ${response.status}`, response.data)
    return response
  },
  (error) => {
    console.error("‚ùå Erreur de r√©ponse actualit√©s:", error)
    return Promise.reject(error)
  },
)

// Service API pour les actualit√©s
export const actualitesApi = {
  /**
   * R√©cup√©rer les 5 derni√®res actualit√©s
   * @returns {Promise} Liste des actualit√©s
   */
  async getLatestActualites() {
    try {
      console.log("üì∞ R√©cup√©ration des derni√®res actualit√©s...")
      const response = await actualitesApiClient.get("/api-actualites2.php", {
        params: {
          action: "get_latest",
          limit: 5
        }
      })

      if (response.data.success) {
        console.log("‚úÖ Actualit√©s r√©cup√©r√©es:", response.data.data.length, "articles")
        return response.data.data
      } else {
        throw new Error(response.data.error || "Erreur lors de la r√©cup√©ration des actualit√©s")
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des actualit√©s:", error)
      throw error
    }
  },

  /**
   * R√©cup√©rer une actualit√© par ID
   * @param {number} id - ID de l'actualit√©
   * @returns {Promise} Donn√©es de l'actualit√©
   */
  async getActualiteById(id) {
    try {
      console.log(`üì∞ R√©cup√©ration de l'actualit√© ID: ${id}`)
      const response = await actualitesApiClient.get("/api-actualites2.php", {
        params: {
          action: "get_by_id",
          id: id
        }
      })

      if (response.data.success) {
        console.log("‚úÖ Actualit√© r√©cup√©r√©e:", response.data.data)
        return response.data.data
      } else {
        throw new Error(response.data.error || "Actualit√© non trouv√©e")
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration de l'actualit√©:", error)
      throw error
    }
  },

  /**
   * R√©cup√©rer toutes les actualit√©s avec pagination
   * @param {Object} params - Param√®tres de pagination
   * @returns {Promise} Liste pagin√©e des actualit√©s
   */
  async getAllActualites(params = {}) {
    try {
      console.log("üì∞ R√©cup√©ration de toutes les actualit√©s...")
      const response = await actualitesApiClient.get("/api-actualites2.php", {
        params: {
          action: "get_all",
          ...params
        }
      })

      if (response.data.success) {
        console.log("‚úÖ Actualit√©s r√©cup√©r√©es:", response.data.data.length, "articles")
        return response.data
      } else {
        throw new Error(response.data.error || "Erreur lors de la r√©cup√©ration des actualit√©s")
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des actualit√©s:", error)
      throw error
    }
  },

  /**
   * Cr√©er une nouvelle actualit√©
   * @param {Object} actualiteData - Donn√©es de l'actualit√©
   * @returns {Promise} Actualit√© cr√©√©e
   */
  async createActualite(actualiteData) {
    try {
      console.log("üìù Cr√©ation d'une nouvelle actualit√©...")
      console.log("üì§ Donn√©es de l'actualit√©:", actualiteData)

      const response = await actualitesApiClient.post("/api-actualites2.php", actualiteData, {
        params: {
          action: "create"
        }
      })

      if (response.data.success) {
        console.log("‚úÖ Actualit√© cr√©√©e avec succ√®s:", response.data.data)
        return response.data.data
      } else {
        throw new Error(response.data.error || "Erreur lors de la cr√©ation de l'actualit√©")
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la cr√©ation de l'actualit√©:", error)
      throw error
    }
  },

  /**
   * Mettre √† jour une actualit√©
   * @param {number} id - ID de l'actualit√©
   * @param {Object} actualiteData - Nouvelles donn√©es
   * @returns {Promise} Actualit√© mise √† jour
   */
  async updateActualite(id, actualiteData) {
    try {
      console.log(`üìù Mise √† jour de l'actualit√© ID: ${id}`)
      const response = await actualitesApiClient.put("/api-actualites2.php", actualiteData, {
        params: {
          action: "update",
          id: id
        }
      })

      if (response.data.success) {
        console.log("‚úÖ Actualit√© mise √† jour:", response.data.data)
        return response.data.data
      } else {
        throw new Error(response.data.error || "Erreur lors de la mise √† jour de l'actualit√©")
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour de l'actualit√©:", error)
      throw error
    }
  },

  /**
   * Supprimer une actualit√©
   * @param {number} id - ID de l'actualit√©
   * @returns {Promise} R√©sultat de la suppression
   */
  async deleteActualite(id) {
    try {
      console.log(`üóëÔ∏è Suppression de l'actualit√© ID: ${id}`)
      const response = await actualitesApiClient.delete("/api-actualites2.php", {
        params: {
          action: "delete",
          id: id
        }
      })

      if (response.data.success) {
        console.log("‚úÖ Actualit√© supprim√©e:", response.data.message)
        return response.data
      } else {
        throw new Error(response.data.error || "Erreur lors de la suppression de l'actualit√©")
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la suppression de l'actualit√©:", error)
      throw error
    }
  },

  /**
   * Upload d'une image pour une actualit√©
   * @param {File} file - Fichier image
   * @param {number} actualiteId - ID de l'actualit√© (optionnel)
   * @returns {Promise} URL de l'image upload√©e
   */
  async uploadImage(file, actualiteId = null) {
    try {
      console.log("üîÑ Upload d'image pour actualit√©...")
      
      // Validation du fichier
      if (!file) {
        throw new Error("Aucun fichier fourni")
      }

      // V√©rifier le type de fichier
      const allowedTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp"]
      if (!allowedTypes.includes(file.type)) {
        throw new Error("Type de fichier non support√©. Utilisez JPG, PNG, GIF ou WebP.")
      }

      // V√©rifier la taille (max 5MB)
      const maxSize = 5 * 1024 * 1024 // 5MB
      if (file.size > maxSize) {
        throw new Error("Le fichier est trop volumineux. Taille maximum: 5MB")
      }

      const formData = new FormData()
      formData.append("image", file)
      if (actualiteId) {
        formData.append("actualite_id", actualiteId)
      }

      const response = await actualitesApiClient.post("/api-actualites2.php", formData, {
        params: {
          action: "upload_image"
        },
        headers: {
          "Content-Type": "multipart/form-data",
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)
          console.log(`üì§ Upload Progress: ${percentCompleted}%`)
        },
      })

      if (response.data.success) {
        console.log("‚úÖ Image upload√©e avec succ√®s:", response.data.data.url)
        return response.data.data
      } else {
        throw new Error(response.data.error || "Erreur lors de l'upload de l'image")
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de l'upload de l'image:", error)
      throw error
    }
  },

  /**
   * Gestion des erreurs
   * @param {Error} error - Erreur captur√©e
   * @param {string} defaultMessage - Message par d√©faut
   * @returns {Error} Erreur format√©e
   */
  handleError(error, defaultMessage) {
    const message = error.response?.data?.error || error.message || defaultMessage
    const statusCode = error.response?.status || 500

    const formattedError = new Error(message)
    formattedError.statusCode = statusCode
    formattedError.originalError = error

    return formattedError
  },
}

// Fonction utilitaire pour formater les donn√©es d'actualit√©
export const actualiteUtils = {
  /**
   * Formater une actualit√© pour l'affichage
   * @param {Object} actualite - Donn√©es brutes de l'actualit√©
   * @returns {Object} Donn√©es format√©es
   */
  formatActualite(actualite) {
    return {
      id: actualite.id,
      title: actualite.titre || actualite.title,
      date: actualite.date_publication || actualite.date,
      excerpt: actualite.resume || actualite.excerpt || actualite.contenu?.substring(0, 150) + "...",
      content: actualite.contenu || actualite.content,
      image: actualite.image_url || actualite.image,
      author: actualite.auteur || actualite.author,
      category: actualite.categorie || actualite.category,
      status: actualite.statut || actualite.status,
      created_at: actualite.created_at,
      updated_at: actualite.updated_at
    }
  },

  /**
   * Formater la date pour l'affichage
   * @param {string} dateString - Date au format ISO
   * @returns {string} Date format√©e
   */
  formatDate(dateString) {
    if (!dateString) return ""
    
    const date = new Date(dateString)
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    }
    
    return date.toLocaleDateString('fr-FR', options)
  },

  /**
   * Tronquer le texte
   * @param {string} text - Texte √† tronquer
   * @param {number} maxLength - Longueur maximale
   * @returns {string} Texte tronqu√©
   */
  truncateText(text, maxLength = 150) {
    if (!text) return ""
    if (text.length <= maxLength) return text
    return text.substring(0, maxLength).trim() + "..."
  }
}

// Export par d√©faut
export default actualitesApi
